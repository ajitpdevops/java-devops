name: Deploy Coupon Microservice to AWS ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1          
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}             
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}     
  ECR_REPOSITORY: 243302161856.dkr.ecr.us-east-1.amazonaws.com/coupon            
  SERVICE_NAME: coupon
  IMAGE_TAG: ${{ github.sha }}                       

jobs:
  deploy:
    name: Build and Deploy to ECS Staging
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          path: |
            .
            ../platforminfra/env

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Docker Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_NAME: ${{ env.ECR_REPOSITORY }}
        run: |
          echo "::set-env name=IMAGE_NAME::${ECR_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}"
          docker build -t ${ECR_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG} -f Dockerfile .
          docker push ${ECR_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}
          docker tag ${ECR_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG} ${ECR_REGISTRY}/${IMAGE_NAME}:latest
          docker push ${ECR_REGISTRY}/${IMAGE_NAME}:latest

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.4.5   # Specify the desired Terraform version

      - name: Copy backup config file
        run: cp ../platforminfra/env/platform-stage.config .

      - name: Copy tfvars file
        run: cp ../platforminfra/env/stage.tfvars .          

      - name: Terraform Init
        run: terraform init --backend-config=platform-stage.config

      - name: Terraform Workspace Select
        run: terraform workspace select ${{ env.SERVICE_NAME }} || terraform workspace new ${{ env.SERVICE_NAME }}

      - name: Terraform Apply
        run: terraform apply -auto-approve -var-file=stage.tfvars

  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Docker Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_NAME: ${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
        run: |
          echo "::set-env name=IMAGE_NAME::${ECR_REGISTRY}/${IMAGE_NAME}"
          docker build -t $IMAGE_NAME -f Dockerfile .
          docker push ${ECR_REGISTRY}/${IMAGE_NAME}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: <your_terraform_version>   # Specify the desired Terraform version

      - name: Terraform Init
        run: terraform init

      - name: Terraform Workspace Select
        run: terraform workspace select ${{ env.SERVICE_NAME }} || terraform workspace new ${{ env.SERVICE_NAME }}

      - name: Terraform Apply
        run: terraform apply -auto-approve -var="image_tag=${{ env.IMAGE_TAG }}"
